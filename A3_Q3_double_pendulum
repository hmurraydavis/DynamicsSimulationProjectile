function A3_Q3_double_pendulum
    clear all
    close all

    g = 9.81; % gravitational acceleration in m/s^2
    m1 = 3.0; m2=4; %kg
    l1=5; l2=3;
    theta1 = 30 * pi/180; %initial phi value = 30 degrees, convert to rad
    theta2 = 45 * pi/180;
    theta2_dot = 1/ (sin(theta1)*l2); %velocity component in theta direction = 0.5 m/s
    
    % Define state variables: 
    %  z1 = theta1, z2 = d(theta1)/dt, z3 = theta2, z4 = d(theta2)/dt

    % Specify initial conditions. 
    z1_0 = theta1;  
    z2_0 = 0; 
    z3_0 = theta2;    %
    z4_0 = theta2_dot;

    Z_0 = [z1_0, z2_0, 0,z3_0, z4_0,0]; %[t1,t1d,t1dd,t2,t2d,t2dd]
    % Define simulation parameters
    t_span = [0:0.01:15];  % max time span for simulation 

    [t, zout] = ode45(@sphpend_fun, t_span, Z_0);


    % x-y position in cartesian coordinates
    t11=zout(:,1);t22=zout(:,3);
    x1 =l1.*sin(t11); x2=x1-(l2.*sin(t22));
    y1=l1.*cos(t11); y2=y1+(l2*cos(t22));

%     hold all
%     plot(GPE+KE)
%     plot(KE)
%     plot(GPE)
%     xlabel('Time (s)', 'FontSize', 16)
%     ylabel('Energy (J)', 'FontSize', 16)
%     title('Total Energy of a 2D pendulum, 30 degrees start', 'FontSize', 20)
%     legend('Gravitational and Kinetic Energy','Kinetic Energy','Gravitational Energy')
    hold all
    plot(x1,-y1)
    plot(x2,-y2)
    legend('Upper Pendulum', 'Lower Pendulum')
    xlabel('x position (m)', 'FontSize', 16)
    ylabel('y position (m)', 'FontSize', 16)
    title('Double Pendulum, 30, 0 degrees start', 'FontSize', 20)

    function states = sphpend_fun(T, ZZ) %ZZ=[t1,t1d,t1dd,t2,t2d,t2dd]
        % unpack vectors:
        t1=ZZ(1); t2=ZZ(4);
        t1d=ZZ(2); t2d=ZZ(5);
        t1dd=ZZ(3); t2dd=ZZ(6);
        t1dd= ( -(m1+m2)*g*sin(t1)-m2*l2*t2dd*cos(t2-t1)+m2*l2*t2d^2*sin(t2-t1) )/(m1+m2)/l1;
        t2dd=( m2*l1*t1dd*cos(t2-t1)+m2*l1*t1d^2*sin(t2-t1)+m2*g*sin(t2) )/-m2/l2;
        
        n1=-1*(m1+m2)*g*sin(t1);
        n2=-m2*l2*t2d^2*sin(t2-t1);
        n3=m2*g*sin(t2)*cos(t2-t1);
        n4=-m2*l1*t1d^2*sin(t2-t1)*cos(t2-t1);
        n5=(m1+m2)*l1-m2*l1*cos(t2-t1)^2;
        
        t1ddC=(n1+n2+n3+n4)/n5;
        
        n6= m2*g*sin(t1)*cos(t2-t1);
        n7= -m2^2*l2*t2d^2*sin(t2-t1)*cos(t2-t1);
        n8= -m2*g*sin(t2);
        n9= -m2*l1*t1d^2*sin(t2-t1);
        n10= (-1*m2^2*cos(t2-t1)^2*l2/(m1+m2))+(m2*l2); %denom
        
        t2ddC= (n6+n7+n8+n9)/n10;
        
       
        states = [t1d;t1ddC;t1dd;t2d;t2ddC;t2dd];
        %
    end


end
